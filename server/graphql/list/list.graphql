extend type Query {
  # Lookup a list by id.
  list(id: ID!): List
  # Get the lists the user owns.
  lists(ids: [ID], status: ListStatus): [List!]!
}

extend type Mutation {
  # Creates a new list
  createList(input: CreateListInput!): CreateListResponse!
  # Renames an existing list
  renameList(input: RenameListInput!): RenameListResponse!
  # Archives an existing list
  archiveList(input: ArchiveListInput!): ArchiveListResponse!
  # Unarchives an archived list
  unarchiveList(input: UnarchiveListInput!): UnarchiveListResponse!
  # Deletes a list
  deleteList(input: DeleteListInput!): DeleteListResponse!
  # Adds a user (by email) to a list
  shareList(input: ShareListInput!): ShareListResponse!
  # Removes a user (by email) from a list
  unshareList(input: UnshareListInput!): UnshareListResponse!
  # Removes the viewer from a (non-owner) list
  leaveList(input: LeaveListInput!): LeaveListResponse!
}

type List implements Node {
  # The unique identifier for a List (that can be used as a cache key or to refetch this object)
  id: ID!
  # The name of the list
  name: String!
  # Whether or not the list is archived
  isArchived: Boolean!
  # The user id who created the list
  createdBy: ID!
  # When the list was created
  createdAt: DateTime!
  # When the list was last updated
  updatedAt: DateTime!
  # When the list was archived, null if not archived
  archivedAt: DateTime

  # The associated tasks
  tasks: [Task!]!

  # The person who created the list (and owns it)
  creator: User!

  # A list of collaborators associated with the list
  collaborators: [User!]!
}

# The input variables for creating a new list
input CreateListInput {
  # The name of the list
  name: String!
  # TODO: allow task creation at the same time?
}

# The response payload from creating a list
type CreateListResponse {
  # The newly created list
  list: List
  # TODO: error types?
}

# The input variables for renaming a list
input RenameListInput {
  # The id of the list to rename
  id: ID!
  # The new name of the list
  name: String!
}

# The response payload from renaming a list
type RenameListResponse {
  # The renamed list
  list: List
  # TODO: error types?
}

# The input variables for archiving a list
input ArchiveListInput {
  # The id of the list you want to archive
  id: ID!
}

# The response payload for archiving a list
type ArchiveListResponse {
  list: List
}

# The input variables for unarchiving a list
input UnarchiveListInput {
  # The id of the list you want to unarchive
  id: ID!
}

# The response payload for unarchiving a list
type UnarchiveListResponse {
  list: List
}

# The input variables to delete a list
input DeleteListInput {
  # The id of the list you wish to delete
  id: ID!
}

# The response payload from deleting a list
type DeleteListResponse {
  # The id of the list that was deleted
  id: ID
  # TODO: error types?
}

# The input variables to share a list
input ShareListInput {
  # The id of the list you wish to share with someone
  id: ID!
  # The email address of the person you wish to share the list
  email: String!
}

# The response payload from sharing a list
type ShareListResponse {
  list: List
}

# The input variables to unshare a list
input UnshareListInput {
  # The id of the list you wish to unshare
  id: ID!
  # The email address of the person you wish to remove from the list
  email: String!
}

# The response payload from unsharing a list
type UnshareListResponse {
  list: List
}

# The input variables to leave a list
input LeaveListInput {
  # The id of the list you wish to unshare
  id: ID!
}

# The response payload from leaving a list
type LeaveListResponse {
  # Whether or not leaving the list was successful
  success: Boolean!
}

enum ListStatus {
  ARCHIVED
  ACTIVE
  ALL
}
