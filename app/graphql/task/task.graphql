extend type Query {
  tasks(ids: [String]): [Task]
}

extend type Mutation {
  # Creates a new task
  createTask(input: CreateTaskInput!): CreateTaskResponse!
  # Update an existing task
  updateTask(input: UpdateTaskInput!): UpdateTaskResponse!
  # Mark a task complete
  completeTask(input: CompleteTaskInput!): CompleteTaskResponse!
  # Mark a task incomplete
  reopenTask(input: ReopenTaskInput!): ReopenTaskResponse!
  # Delets a task
  deleteTask(input: DeleteTaskInput!): DeleteTaskResponse!
}

type Task {
  # The unique identifier for a Task (that can be used as a cache key or to refetch this object)
  id: ID!
  # The content of the task
  content: String!
  # Whether or not the task is marked as complete
  isCompleted: Boolean!
  # The associated list this task belongs to
  listId: ID
  # The user id who created the task
  createdBy: String
  # When the task was created
  createdAt: DateTime!
  # When the task was last updated
  updatedAt: DateTime!
  # When the task was completed, null if not completed
  completedAt: DateTime!

  # TODO: evaluate exposing 'list' field to find associated parent list
  # (which could result in circular references: task.list.tasks[0].list.tasks etc)
}

# The input variables for creating a new task
input CreateTaskInput {
  # The content of the task
  content: String!
  # The id of a list that this task should belong to (optionally)
  listId: ID
}

# The response payload for creating a task
type CreateTaskResponse {
  # The newly created task
  task: Task
  # TODO: error types?
}

# The input variables for updating a task
input UpdateTaskInput {
  # The id of the task to update
  id: String!
  # The (optional) new content for the task
  # When omitted, the content will not change
  content: String
  # The (optional) state of the task
  isCompleted: Boolean
  # The (optional) timestamp of completion
  completedAt: DateTime
}

# The response payload from updating a task
type UpdateTaskResponse {
  task: Task
  # TODO: error types?
}

# The input variables to close/complete a task
input CompleteTaskInput {
  # The id of the task to complete
  id: String!
}

# The response payload from completing a task
type CompleteTaskResponse {
  # The completed task
  task: Task
  # TODO: error types?
}

# The input variables to reopen a task
input ReopenTaskInput {
  # The id of the task to reopen
  id: String!
}

# The response payload from reopening (marking incomplete) a task
type ReopenTaskResponse {
  # The reopened task
  task: Task
  # TODO: error types?
}

# The input variables to delete a task
input DeleteTaskInput {
  # The id of the task you wish to delete
  id: String!
}

# The response payload from deleting a task
type DeleteTaskResponse {
  # The id of the task that was deleted
  id: String
  # TODO: error types?
}
